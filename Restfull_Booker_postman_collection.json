{
	"info": {
		"_postman_id": "3915c88b-3d61-4633-98c8-f177816ae306",
		"name": "Restfull_Booker",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26742114",
		"_collection_link": "https://blue-capsule-187837.postman.co/workspace/81f3b63b-3e60-4abd-9434-d36b402e2675/collection/26742114-3915c88b-3d61-4633-98c8-f177816ae306?action=share&source=collection_link&creator=26742114"
	},
	"item": [
		{
			"name": "Post_Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"bookingID\",variable_value.bookingid);\r",
							"\r",
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"firstname\",variable_value.booking.firstname);\r",
							"\r",
							"\r",
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"lastname\",variable_value.booking.lastname);\r",
							"\r",
							"\r",
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"checkin\",variable_value.booking.bookingdates.checkin);\r",
							"\r",
							"\r",
							"\r",
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"checkout\",variable_value.booking.bookingdates.checkout);\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname\" : \"{{firstname}}\",\r\n    \"lastname\" : \"{{lastname}}\",\r\n    \"totalprice\" :\" {{totalPrice}}\",\r\n    \"depositpaid\" : \"{{depositpaid}}\",\r\n    \"bookingdates\" : {\r\n        \"checkin\" :\"{{checkin}}\",\r\n        \"checkout\" : \"{{checkout}}\"\r\n    },\r\n    \"additionalneeds\" : \"{{additionalneeds}}\"\r\n}",
					"options": {
						"raw": {
							"language": "text"
						}
					}
				},
				"url": {
					"raw": "{{BaseBooK}}/booking",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var variable_value =pm.response.json();\r",
							"pm.environment.set(\"AuthToken\",variable_value.token);\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"{{Admin}}\",\r\n    \"password\" : \"{{Password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseBooK}}/auth",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "AllBooking ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    const expectedStatus = 200; \r",
							"    const actualStatus = pm.response.code;\r",
							"\r",
							"    // Test to check if the actual status matches the expected status\r",
							"    pm.expect(actualStatus).to.eql(expectedStatus);\r",
							"\r",
							"    // Print the expected and actual status codes to the console\r",
							"    console.log(`Expected status: ${expectedStatus}, Actual status: ${actualStatus}`);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseBooK}}/booking/",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ExampleBooking_ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    const expectedStatus = 200; \r",
							"    const actualStatus = pm.response.code;\r",
							"    pm.expect(actualStatus).to.eql(expectedStatus);\r",
							"    console.log(`Expected status: ${expectedStatus}, Actual status: ${actualStatus}`);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"// Get the bookingID variable\r",
							"const bookingID = pm.variables.get(\"bookingID\");\r",
							"\r",
							"// Dynamically set the test name with the bookingID\r",
							"pm.test(`Get bookingID: ${bookingID}`, function () {\r",
							"    // Log the bookingID to the console\r",
							"    console.log(`Booking ID being used: ${bookingID}`);\r",
							"\r",
							"    // Example assertion (optional)\r",
							"    pm.expect(bookingID).to.not.be.undefined;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseBooK}}/booking/{{bookingID}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Example_name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Get the bookingID variable\r",
							"const FirstName = pm.variables.get(\"firstname\");\r",
							"const LastName = pm.variables.get(\"lastname\");\r",
							"\r",
							"// Dynamically set the test name \r",
							"pm.test(`Get FirstName: ${FirstName}.`, function () {\r",
							"    // Log the firstname to the console\r",
							"    console.log(`User FirstName : ${FirstName}.`);\r",
							"\r",
							"    // Example assertion (optional)\r",
							"    pm.expect(FirstName).to.not.be.undefined;\r",
							"});\r",
							"\r",
							"// Dynamically set the test name \r",
							"pm.test(`Get LastName: ${LastName}.`, function () {\r",
							"    // Log the lastname to the console\r",
							"    console.log(`User LastName : ${LastName}.`);\r",
							"\r",
							"    // Example assertion (optional)\r",
							"    pm.expect(LastName).to.not.be.undefined;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseBooK}}/booking?firstname={{firstname}}&lastname={{lastname}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "{{firstname}}"
						},
						{
							"key": "lastname",
							"value": "{{lastname}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Example_CheckIN_OUT",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"// Get the bookingID variable",
							"const CheckIn = pm.variables.get(\"checkin\");",
							"const CheckOut = pm.variables.get(\"checkout\");",
							"",
							"// Dynamically set the test name ",
							"pm.test(`User CheckIn Time: ${CheckIn}.`, function () {",
							"    // Log the firstname to the console",
							"    console.log(`User CheckIn Time : ${CheckIn}.`);",
							"",
							"    // Example assertion (optional)",
							"    pm.expect(CheckIn).to.not.be.undefined;",
							"});",
							"",
							"// Dynamically set the test name ",
							"pm.test(`User CheckOut Time: ${CheckOut}.`, function () {",
							"    // Log the lastname to the console",
							"    console.log(`User CheckOut : ${CheckOut}`);",
							"",
							"    pm.expect(CheckOut).to.not.be.undefined;",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseBooK}}/booking?checkin={{checkin}}&checkout={{checkout}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "checkin",
							"value": "{{checkin}}"
						},
						{
							"key": "checkout",
							"value": "{{checkout}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stores the total price in an environment or global variable",
							"var totalPrice = pm.response.json().totalprice;",
							"pm.globals.set(\"totalPrice\", totalPrice);",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData).to.have.property('firstname');",
							"    pm.expect(responseData).to.have.property('lastname');",
							"    pm.expect(responseData).to.have.property('totalprice');",
							"    pm.expect(responseData).to.have.property('depositpaid');",
							"    pm.expect(responseData).to.have.property('bookingdates');",
							"    pm.expect(responseData).to.have.property('additionalneeds');",
							"});",
							"",
							"pm.test(\"Total price is a non-negative integer\", function () {",
							"  const responseData = pm.response.json();",
							"  pm.expect(responseData.totalprice).to.be.a('number');",
							"  pm.expect(responseData.totalprice).to.be.at.least(0, \"Total price should be a non-negative integer\");",
							"});",
							"",
							"pm.test(\"Depositpaid is a boolean value\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.depositpaid).to.be.a('boolean');",
							"});",
							"",
							"pm.test(\"Additionalneeds is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.additionalneeds).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token={{AuthToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname\": \"somiron\",\r\n    \"lastname\": \"kumar\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2020-01-01\",\r\n        \"checkout\": \"2020-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseBooK}}/booking/{{bookingID}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				},
				"description": "### Update Booking Details\n\nThis API endpoint is used to update the details of a booking by making an HTTP PUT request to `{{BaseBooK}}/booking/{{bookingID}}`.\n\n#### Request Body\n\n- The request should include a JSON payload with the following parameters:\n    \n    - `firstname` (string): The first name of the guest.\n        \n    - `lastname` (string): The last name of the guest.\n        \n    - `totalprice` (number): The total price of the booking.\n        \n    - `depositpaid` (boolean): Indicates if the deposit has been paid.\n        \n    - `bookingdates` (object): An object containing the check-in and check-out dates.\n        \n        - `checkin` (string): The check-in date in the format \"YYYY-MM-DD\".\n            \n        - `checkout` (string): The check-out date in the format \"YYYY-MM-DD\".\n            \n    - `additionalneeds` (string): Any additional needs or requests for the booking.\n        \n\n#### Response (200 - OK)\n\nThe response will be in JSON format with the following schema:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"firstname\": { \"type\": \"string\" },\n        \"lastname\": { \"type\": \"string\" },\n        \"totalprice\": { \"type\": \"number\" },\n        \"depositpaid\": { \"type\": \"boolean\" },\n        \"bookingdates\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"checkin\": { \"type\": \"string\" },\n                \"checkout\": { \"type\": \"string\" }\n            }\n        },\n        \"additionalneeds\": { \"type\": \"string\" }\n    }\n}\n\n ```\n\nThe response will include the updated booking details with the same structure as the request payload, where the values may be modified based on the update operation."
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response content type is text/plain\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text",
						"disabled": true
					},
					{
						"key": "Cookie",
						"value": "token={{AuthToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "\r\n{\r\n    \"firstname\": \"Hasan\",\r\n    \"lastname\": \"kamal\",\r\n    \"totalprice\": 5000\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseBooK}}/booking/{{bookingID}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteRequst",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Sefly Delete\", function () {\r",
							"    pm.response.to.have.body(\"Delete\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Self Delete\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Self Delete\", function () {\r",
							"    const responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.message).to.equal(\"Created\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{AuthToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{BaseBooK}}/booking/{{bookingID}}",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"booking",
						"{{bookingID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "pingCheck",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseBooK}}/ping",
					"host": [
						"{{BaseBooK}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		}
	]
}
